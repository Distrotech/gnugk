<sect>Routing Configuration
<p>
The following sections in the config file can be used to configure how calls are routed.

For GnuGk, "routing" means that the gatekeeper must find a destination IP
for each new call.

For example GnuGk may need to decide where to send a
voice call given a particular E.164 destination; there may be multiple
IP-to-ISDN gateways which it may choose from for that E.164 address.

Routing decisions are typically made by examining the called name or number,
but GnuGk has flexibility in what it evaluates in order to successfully
route the call.
<p>
Each call gets passed down a chain of routing policies.
Each policy may route the call and terminate the chain or modify it and
pass it on. You can use the setting in the following sections to
specify which policies to use and modify their behavior.

<sect1>Section &lsqb;RoutingPolicy&rsqb;
<label id="routingpolicy">
<p>
This section explains how <htmlurl url="http://www.gnugk.org/" name="GNU
Gatekeeper"> routing policies are configured.

An incoming call request can be routed using the following
methods:

<itemize>

<item><tt/explicit/<newline>
<p>
The destination is explicitly specified in the call to be routed.
This policy is needed for dialing by IP address.
You can define mappings for the destination IP in the
<ref id="routingexplicit" name="Routing::Explicit"> section.

<item><tt/internal/<newline>
<p>
The classic rule; search for the destination in
RegistrationTable

<item><tt/parent/<newline>
<p>
Route the call using information sent by the parent gatekeeper in
reply to an ARQ the gatekeeper will send.
You can define your parent gatekeeper using the <ref id="endpoint" name="Endpoint"> section.

<item><tt/neighbor/<newline>
<p>
Route the call using neighbors by exchanging LRQ messages.

<item><tt/dns/<newline>
<p>
The destination is resolved using DNS A records or IP addresses in the called alias.
This policy can be configured in the <ref id="routingdns" name="Routing::DNS"> section.

<item><tt/sql/<newline>
<p>
Route calls by rewriting the called alias with a database query or send them directly to a destination IP. The database parameters are specified in the <ref id="routingsql" name="Routing::Sql"> section.

<item><tt/vqueue/<newline>
<p>
Use the virtual queue mechanism and generate a RouteRequest
event to allow an external application to make a routing decision.

<item><tt/numberanalysis/<newline>
<p>
Provides support for overlapped digit sending for ARQ messages.
This also partially supports Setup messages (no overlapped sending
- only number length validation).

<item><tt/enum/<newline>
<p>
ENUM (RFC3761) is a method to use DNS lookups to convert
real International Direct Dialing E.164 numbers into H.323 dialing information. The default servers
are <tt/e164.voxgratia.net/, <tt/e164.org/ and <tt/e164.arpa/.
To specify your own list of servers use the <tt/ENUMservers/ switch in the RoutedMode section.

The enum policy replaces the destination with the information returned by the ENUM server, 
so you must have the appropriate routing policies to continue processing the call after the enum policy. 
You should have the srv and dns policies after the enum policy, because the new location is often 
returned in the form of 'number@gatekeeper' and the srv and dns policies are needed to resolve this.

Finally, keep in mind that each routing check with the enum policy requires a DNS lookup. 
To speed up your routing, make sure you resolve internal destinations before the enum policy is applied.

This policy can be configured in the <ref id="routingenum" name="Routing::ENUM"> section.

<item><tt/srv/<newline>
<p>
DNS SRV or H.323 Annex O allows for the routing of calls using a H.323 URI. 
Addresses can be configured as user (at) domain. H.323 URIs are stored in the 
SRV DNS records of the domain and are queried to find the destination. 

This policy can be configured in the <ref id="routingsrv" name="Routing::SRV"> section.

<item><tt/rds/<newline>
<p>
RDS Resolver Discovery Service or DDDS Dynamic Delegation Discovery Service (examples in RFC3404 sect 5.2/5.3)
This policy is a mechanism whereby domain name SRV records are hosted in central DNS servers. The 
servers are set by [RoutedMode] RDSServers and are queried in order to resolve H323+D2U NAPTR records which
contain H.323 Annex O SRV records for domains. This can be used to virtually host URL domains or 
centralize the control of SRV records. 

This policy can be configured in the <ref id="routingrds" name="Routing::RDS"> section.

<item><tt/forwarding/<newline>
<p>
This policy will perform a database lookup if calls to this destination should be forwarded.
The configuration for this policy must be in the <ref id="routingforwarding" name="Routing::Forwarding"> section.

<item><tt/catchall/<newline>
<p>
This policy will route all calls that reach it to one endpoint specified in the <ref id="routingcatchall" name="Routing::CatchAll"> section.
You can use it as a fallback at the end of the policy chain to route all calls which would otherwise fail.

<item><tt/lua/<newline>
<p>
This policy runs the LUA script defined in <ref id="routingcatchall" name="Routing::Lua"> section to set a call destination. NOTE: This policy is still experimental and may change!

</itemize>

<p>
Default configuration for routing policies is as follows:
<descrip>
<quote><tt>[RoutingPolicy]<newline>
default=explicit,internal,parent,neighbor</tt></quote>
</descrip>

If one policy does not match, the next policy is tried.

These policies can be applied to a number of routing request types and routing input data. The different types are
ARQ, LRQ, Setup and Facility (with the callForwarded reason).
There is also the general routing policy, which is a
default for the other types.

<descrip>
<tag/Example:/
<quote><tt>[RoutingPolicy]<newline>
h323_ID=dns,internal<newline>
002=neighbor,internal<newline>
Default=internal,neighbor,parent</tt></quote>
</descrip>

When a message is received which requires a routing
decision, all calls to an alias of the h323_ID type will be
resolved using DNS. If DNS fails to resolve the alias, it is
matched against the internal registration table. If a call is
requested to an alias starting with 002, the neighbors will be checked first,
then the internal registration table. If the
requested alias is not an h323_ID or an alias starting with
002, the default policy is used by querying the internal
registration table, then the neighbors, and if those fail, the
parent.

Routing policies are applied to the first message of a call:
The ARQ for calls from registered endpoints,
the Setup for calls from unregistered endpoints,
the LRQ for calls from neighbors and certain Facility messages
for calls that are forwarded by GnuGk using the ForwardOnFacility feature.
You can specify different routing policies for each type of call by using the
[RoutingPolicy::OnARQ], [RoutingPolicy::OnLRQ],
[RoutingPolicy::OnSetup] and [RoutingPolicy::OnFacility] sections
using the same syntax explained above.

<descrip>
<tag/Example:/
<quote><tt>[RoutingPolicy::OnARQ]<newline>
default=numberanalysis,internal,neighbor</tt></quote>
</descrip>

A typical ENUM routing setup would look like this:
<descrip>
<tag/Example:/
<quote><tt>[RoutingPolicy]<newline>
default=explicit,internal,enum,srv,dns,internal,parent,neighbor</tt></quote>
</descrip>


<sect1>Section &lsqb;RasSrv::RewriteE164&rsqb;
<label id="rewrite">
<p>
This section defines the rewriting rules for dialedDigits (E.164 number).

<descrip>
<tag/Format:/
<tt>[!]original-prefix=target-prefix</tt>
<p>
If the number begins with <tt/original-prefix/,
it is rewritten to <tt/target-prefix/.
If the `<tt/!/' flag precedes the <tt/original-prefix/, the sense is inverted
and the target-prefix is prepended to the dialed number. Special wildcard
characters (<tt/'.'/ and <tt/'%'/) are available.
<tag/Example:/
<tt/08=18888/
<p>
If you dial <tt/08345718/, it is rewritten to <tt/18888345718/.
<tag/Example:/
<tt/!08=18888/
<p>
If you dial <tt/09345718/, it is rewritten to <tt/1888809345718/.
</descrip>

Option:
<itemize>
<item><tt/Fastmatch=08/<newline>
Default: <tt>N/A</tt><newline>
<p>
Only rewrite dialDigits beginning with the specified prefix.
</itemize>

<sect1>Section &lsqb;RasSrv::RewriteAlias&rsqb;
<label id="rewrite">
<p>
This section defines the rewriting rules for aliases. This can be used to
map gatekeeper assigned aliases to registered endpoints.

<descrip>
<tag/Format:/
<tt>[!]original-alias=target-alias</tt>
<p>
If the alias is <tt/original-alias/,
it is rewritten to <tt/target-alias/.
<tag/Example:/
<tt/bill=033123456/
</descrip>


<sect1>Section &lsqb;RasSrv::GWRewriteE164&rsqb;
<label id="gwrewrite">
<p>
This section describes rewriting the dialedDigits E.164 number depending on
the gateway a call has come from or is being sent to. This allows for more
flexible manipulation of the dialedDigits for routing etc.

Despite the name of the section, you can not only rewrite calls from and to gateways,
but also calls from terminals (regular endpoints) and neighbor gatekeepers.

In combination
with the <ref id="rewrite" name="RasSrv::RewriteE164"> you can have triple
stage rewriting:

<tscreen><verb>
Call from "gw1", dialedDigits 0867822
		|
		|
		V
Input rules for "gw1", dialedDigits now 550867822
		|
		|
		V
Global rules, dialedDigits now 440867822
		|
		|
		V
Gateway selection, dialedDigits now 440867822, outbound gateway "gw2"
		|
		|
		V
Output rules for "gw2", dialedDigits now 0867822
		|
		|
		V
Call to "gw2", dialedDigits 0867822
</verb></tscreen>

<descrip>
<tag/Format:/
<tt>alias=in|out=[!]original-prefix=target-prefix[;in|out...]</tt>
<p>
If the call matches the alias, the direction and begins with
<tt/original-prefix/ it is rewritten to <tt/target-prefix/.
If the `<tt/!/' flag precedes the <tt/original-prefix/, the sense is inverted.
Special wildcard characters (<tt/'.'/ and <tt/'%'/) are available.
'.' matches one character and '%' matches any number of characters.
Multiple rules for the same gateway are separated by ';'.
<p>
Calls from and to gateways and terminals are matched by their first alias.
Calls from and to neighbors are matched by the neighbor ID in the GnuGk
config (the XXX in the [Neighbor::XXX] section name) or the gatekeeper identifier
of the neighbor if it is set.

Note that when you have multi-homed neighbors or are accepting non-neighbor LRQs,
the source of the call can not always be determined and no IN rule for a neighbor will match.
In these cases you should only use OUT and [RasSrv::RewriteE164] rules.

<tag/Example:/
<tt/gw1=in=123=321/
<p>
If a call is received from "gw1" to <tt/12377897/, it is rewritten to <tt/32177897/
before further action is taken.

<tag/Neighbor Example 1:/
<p>
In this example the neighbor is identified by its ID and incoming calls from NbGk
will have their 01 prefix replaced by a 04 prefix.  Outgoing calls will have 04 replaced with 01.
<tscreen><verb>
[RasSrv::Neighbors]
NbGk=GnuGk

[Neighbor::NbGk]
GatekeeperIdentifier=GK-PW-Prox
Host=192.168.1.100
SendPrefixes=*
AcceptPrefixes=*

[RasSrv::GWRewriteE164]
NbGk=in=01=04;out=04=01
</verb></tscreen>

<tag/Neighbor Example 2:/
<p>
In this example the neighbor is identified by its gatekeeper identifier and
incoming calls from GK-PW-Prox that don't have a 0049 prefix get the prefix
prepended.  A call to "1234" would be rewritten to "00491234", while a call
to "00496789" would proceed unchanged because the "If incoming does not
start with 0049 and any number of digits after 0049, then prepend 0049"
logic would be false (because we already have 0049 at the beginning.)

<tscreen><verb>
[RasSrv::Neighbors]
NbGk=GnuGk

[Neighbor::NbGk]
GatekeeperIdentifier=GK-PW-Prox
Host=192.168.1.100
SendPrefixes=*
AcceptPrefixes=*

[RasSrv::GWRewriteE164]
GK-PW-Prox=in=!0049.=0049.
</verb></tscreen>
</descrip>


<sect1>Section &lsqb;Endpoint::RewriteE164&rsqb;
<p>
Once you specify prefix(es) for your gatekeeper endpoint, the parent
gatekeeper will route calls with <bf/dialedDigits/ beginning with that prefixes.
The child gatekeeper can rewrite the destination according to the rules
specified in this section. By contrast, when an internal endpoint calls
an endpoint registered to the parent gatekeeper, the source will be
rewritten reversely.

<descrip>
<tag/Format:/
<tt/external prefix=internal prefix/
</descrip>

For example, if you have the following configuration,

<tscreen><verb>
                        [Parent GK]
                        ID=MasterGK
                        /         \
                       /           \
                      /             \
                     /               \
                [Child GK]          [EP3]
                ID=ProxyGK          E164=18888200
                Prefix=188886
                /       \
               /         \
              /           \
           [EP1]         [EP2]
           E164=601      E164=602
</verb></tscreen>

With this rule:
<tscreen><verb>
188886=6
</verb></tscreen>

When EP1 calls EP3 by <tt/18888200/, the CallingPartyNumber in the Q.931 Setup
will be rewritten to <tt/18888601/. Conversely, EP3 can reach EP1 and EP2
by calling <tt/18888601/ and <tt/18888602/, respectively. In consequence, an
endpoint registered to the child gatekeeper with prefix '<tt/6/' will appear
as an endpoint with prefix '<tt/188886/', for endpoints registered to
the parent gatekeeper.

The section does not relate to the section
<ref id="rewrite" name="RasSrv::RewriteE164">,
though the latter will take effect first.


<sect1>Section &lsqb;Routing::DNS&rsqb;
<label id="routingdns">
<p>
<itemize>
<item><tt/ResolveNonLocalLRQ=0/<newline>
Default: <tt>1</tt><newline>
<p>
This switch determines whether the DNS policy should resolve hostnames or IPs in LRQs that don't terminate locally.
</itemize>


<sect1>Section &lsqb;Routing::ENUM&rsqb;
<label id="routingenum">
<p>
<itemize>
<item><tt/ResolveLRQ=1/<newline>
Default: <tt>0</tt><newline>
<p>
This switch toggles whether the 'enum' policy should resolve LRQs.
</itemize>


<sect1>Section &lsqb;Routing::SRV&rsqb;
<label id="routingsrv">
<p>
<itemize>
<item><tt/ResolveNonLocalLRQ=1/<newline>
Default: <tt>0</tt><newline>
<p>
This switch selects if the 'srv' policy should resolve hostnames in LRQs that don't terminate locally.
</itemize>


<sect1>Section &lsqb;Routing::RDS&rsqb;
<label id="routingrds">
<p>
<itemize>
<item><tt/ResolveLRQ=1/<newline>
Default: <tt>0</tt><newline>
<p>
This switch selects if the 'rds' policy should resolve hostnames in LRQs.
</itemize>


<sect1>Section &lsqb;Routing::Explicit&rsqb;
<label id="routingexplicit">
<p>
You can define a mapping where calls to certain IPs should be routed by the 'explicit' policy.
The new destination can either be another IP or an alias destination of any type.
If you rewrite the destination to something other than an IP, make sure you have other
routing policies in the chain behind the 'explicit' policy that can handle the new destination.

<descrip>
<tag/Format:/
<tt/IP=newIP[:port] | E.164 | alias/
</descrip>

<descrip>
<tag/Example:/
<quote><tt>[Routing::Explicit]<newline>
192.168.1.100=10.10.1.100<newline>
192.168.1.101=10.10.1.101:1720<newline>
192.168.1.102=654251<newline>
192.168.1.103=peter<newline>
192.168.1.104=joe@company.com</tt></quote>
</descrip>


<sect1>Section &lsqb;Routing::Sql&rsqb;
<label id="routingsql">
<p>
Rewrite the called alias with a SQL query.
Supports routing OnARQ, OnLRQ and OnSetup.

If the string returned from the database is 'REJECT' (upper or lower case),
the call is rejected. If the string matches a dotted IP address, it is
taken as destination IP otherwise it is treated as a new destination alias.
If 2 columns are returned, the first is treated as the new destination alias
and the second is treated as new destination IP.
If the 2nd column contains 'IGNORE', the database result is treated as if it would
only contain 1 result column. (This allows simpler SQL queries in some cases.)

If multiple rows of destination IPs are returned they are used as alternative routes
for failover and GnuGk will try them in order.

When at least one destination IP is specified or the call is rejected,
the SQL policy will end the routing chain.
If only the alias is changed, the chain continues with this updated alias.

When rejecting a call, the 2nd column can contain an integer designating the
reject reason (H.225 AdmissionRejectReason for registered calls,
H.225 LocationRejectReason for neighbor calls,
H.225 disconnect reason for unregistered calls).

If the database returns nothing, the call is passed on unchanged.

Use the <ref id="database" name="common database configuration options">
to define your database connection for this module.

<itemize>
<item><tt/Query=SELECT .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Define a SQL query to fetch the new destination number.
The query is parameterized - that means parameter
replacement is made before each query is executed. The following parameters are defined:
<itemize>
<item><tt/%c/ - the called alias
<item><tt/%p/ - the called IP (only available on Setup, empty otherwise)
<item><tt/%s/ - the calling IP
<item><tt/%r/ - the calling aliases
<item><tt/%{Calling-Station-Id}/ - the calling station ID (same value as used in accounting and authentication events)
<item><tt/%i/ - the call ID
<item><tt/%m/ - the message type (ARQ, LRQ or Setup)
<item><tt/%{client-auth-id}/ - a 64 bit integer ID provided to GnuGk when authenticating the call (through SQLAuth)
</itemize>
Some of these can be empty if they aren't included in the ARQ, LRQ or Setup message.
<p>
If the query returns no rows, the current alias is used.
Otherwise, the first result row is used.
<p>
Query string examples.  Note that these are examples; the actual structure and schema
are user defined, as are the various field names in these examples.  GnuGk is simply expecting either IP addresses or aliases as a result of the query.

<tscreen><verb>
SELECT destination FROM routes WHERE called = '%c'
SELECT concat(prefix,'%c') FROM routes WHERE prefix = LEFT('%c', 5)
SELECT gatewayip FROM routes WHERE prefix = LEFT('%c',5)
SELECT concat(prefix,'%c'), gatewayip FROM routes WHERE route = LEFT('%c', 5) limit 3
</verb></tscreen>

</itemize>

<sect1>Section &lsqb;Routing::NumberAnalysis&rsqb;
<label id="numberanalysis">
<p>
This section defines rules for the <tt/numberanalysis/ routing policy.
The policy checks a dialed number for minimum and/or maximum number of digits
and sends ARJ, if necessary (number of digits is out of range), to support
overlapped digit sending. It also partially supports Setup messages (no overlapped sending
- only number length validation).

<descrip>
<tag/Format:/
<tt>prefix=MIN_DIGITS[:MAX_DIGITS]</tt>
<p>
If the number matches the <tt/prefix/, it is verified to consist of at least
<tt/MIN_DIGITS/ digits and (if MAX_DIGITS is present) at most <tt/MAX_DIGITS/
digits. Special wildcard characters (<tt/!/, <tt/'.'/ and <tt/'%'/) are available.
If the number is too short, an ARJ is send with <tt/rejectReason/ set to <tt/incompleteAddress/.
If the number is too long, an ARJ is send with <tt/rejectReason/ set to <tt/undefinedReason/.
Prefix list is searched from the longest to the shortest prefix for a match.
For Setup messages, a Release Complete with "badFormatAddress" is sent when the number
has an incorrect length.

<tag/Example:/
<tscreen><verb>
[RoutingPolicy::OnARQ]
default=numberanalysis,internal

[Routing::NumberAnalysis]
0048=12
48=10
.=6:20
</verb></tscreen>
<p>
Calls to destinations starting with 0048 require at least 12 digits,
to 48 we require 10 digits and to all other destinations at least 6 and at most 20 digits.
</descrip>


<sect1>Section &lsqb;Routing::Forwarding&rsqb;
<label id="routingforwarding">
<p>
This routing policy performs a database lookup if calls to an endpoint
should be forwarded to another endpoint.
It supports routing OnARQ, OnSetup and OnLRQ.

There are different types of forwards:
<itemize>
<item><bf/Call Forwarding Unconditional/ (CFU, code 1): Calls are always forwarded.
<item><bf/Call Forwarding on Busy/ (CFB, code 2): Calls are forwarded if the called endpoint is already in a call.
<item><bf/Call Forwarding on No Answer/ (CFNA, code 3): Calls are forwarded if the called endpoint doesn't answer the call within the AlertingTimeout.
<item><bf/Call Forwarding on Error/ (CFE, code 4): Calls are forwarded if there is an error routing the call to the endpoint. Currently this behaves like Call Forwarding on No Answer and only one of them should be defined.
</itemize>

The destination where calls are forwarded to should either be aliases of local endpoints (incl. permanent endpoints) or IP numbers.
For local aliases, GnuGk will check if the destination also has forwarding configured and take it into account.

Use the <ref id="database" name="common database configuration options">
to define your database connection for this module.

Specifically for this module, you can specify a query to read the forwarding rules:
<itemize>
<item><tt/Query=SELECT .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Define a SQL query to fetch the forwarding rules.
The query must return 2 colums: First the code for the forwarding type and second the new destination.
It must ensure that the results are ordered ascending by forwarding code.

The query is parameterized - that means parameter
replacement is made before each query is executed. The following parameters are defined:
<itemize>
<item><tt/%c/ - the called alias
<item><tt/%p/ - the called IP (only available on Setup, empty otherwise)
<item><tt/%s/ - the calling IP
<item><tt/%r/ - the calling aliases
<item><tt/%{Calling-Station-Id}/ - the calling station ID (same value as used in accounting and authentication events)
<item><tt/%i/ - the call ID
<item><tt/%m/ - the message type (ARQ or Setup)
<item><tt/%{client-auth-id}/ - a 64 bit integer ID provided to GnuGk when authenticating the call (through SQLAuth)
</itemize>
Some of these can be empty if they aren't included in the ARQ or Setup message.
In most cases you should only use the called alias in the SQL query,
since they apply only to the incoming call and won't change when looking up chained forwarding rules.
<p>
</itemize>

<descrip>
<tag/Example:/
<tscreen><verb>
[RoutedMode]
GKRouted=1
AcceptUnregisteredCalls=1
; failover must be on for forward on timeout
ActivateFailover=1
FailoverCauses=1-15,17-127
DisableRetryChecks=1
; 10 sec alerting timeout (for forward on no answer)
AlertingTimeout=10000

[RoutingPolicy]
default=explicit,forwarding,internal,neighbor,explicit

[Routing::Forwarding]
Driver=MySQL
Host=localhost
Database=gnugk
Username=gnugk
Password=secret
Query=SELECT forwardtype, destination FROM forwards WHERE called = '%c' order by forwardtype asc
MinPoolSize=1
</verb></tscreen>

<tag/Sample MySQL Schema:/
<tscreen><verb>
create table gnugk.forwards (
    called varchar(30) not null,
    forwardtype smallint not null,
    destination varchar(30) not null default "",
    PRIMARY KEY (called, forwardtype)
);
</verb></tscreen>

<tag/Sample Forwarding Rules:/
<tscreen><verb>
"1234", 1, "2000"
"5678", 2, "4000"
"5678", 3, "4000"
"9876", 4, "5000"
</verb></tscreen>

</descrip>


<sect1>Section &lsqb;Routing::CatchAll&rsqb;
<label id="routingcatchall">
<p>
<itemize>
<item><tt/CatchAllIP=1.2.3.4/<newline>
Default: <tt>(empty)</tt><newline>
<p>
Specify an IP address to route all calls to. This overrides CatchAllAlias.

<item><tt/CatchAllAlias=Frank/<newline>
Default: <tt>catchall</tt><newline>
<p>
If CatchAllIP is not specified, then route all calls to this alias.
</itemize>

<sect1>Section &lsqb;Routing::Lua&rsqb;
<label id="routinglua">
<p>
NOTE: This policy is still experimental and may change in the next release.
Please contact the GNU Gatekeeper authors if you want to use it in production.

The LUA script has the following <bf/input variables/ available:
<itemize>
<item>source - source IP
<item>calledAlias - called alias (only first alias)
<item>calledIP - called IP address if IP dialing was used
<item>caller - aliasses of the caller
<item>callingStationId - calling station ID
<item>callid - the call ID
<item>messageType - the message that triggered the routing process ('ARQ', 'LRQ', 'Setup' or 'Facility')
<item>clientauthid - client auth ID
</itemize>

The LUA script can set these <bf/output variables/ to specify a routing destination:
<itemize>
<item>action - set this to either 'SKIP' or 'REJECT' if you don' want to route the call, otherwise the call is routed to destAlias or destIp (see below)
<item>rejectCode - reject reason to use with 'REJECT'
<item>destAlias - call destination alias
<item>destIP - call destination IP
</itemize>

To access external resources, LUA scripts can use LUA libraries, eg. LuaSocket.

<itemize>
<item><tt/Script=destAlias=string.gsub(calledAlias, "#", "*")/<newline>
Default: <tt>(empty)</tt><newline>
<p>
Define the LUA script to run, right in the config file.

<item><tt/ScriptFile=script.lua/<newline>
Default: <tt>(empty)</tt><newline>
<p>
Specify a file with a LUA script to run for the 'lua' policy.

</itemize>



<sect1>Section &lsqb;RewriteCLI&rsqb;
<label id="clirewrite">
<p>
This section contains a set of rewrite rules for ANI/CLI/H.323_ID numbers (Caller ID).
The rewrite process is done in two stages - inbound rewrite and outbound rewrite.
The inbound rewrite is done before any other Q.931 Setup message processing
(such as inbound GWRewrite, authentication, accounting, ...), and because it alters the Calling-Station-Id it will have
an effect in the authorization and accounting modules.
The outbound rewrite takes place just before the Setup message is to be forwarded
and its effect is visible only to the callee.
<p>
An inbound rewrite rule can be matched by a caller's IP and a dialed number
or an original CLI/ANI.
An outbound rewrite rule can be matched by a caller's IP, callee's IP and
a dialed number or a destination number (the dialed number after rewrite)
or a CLI/ANI (after inbound rewrite).
<p>
This module also provides CLIR (Calling Line Identification Restriction)
feature that can be configured for each endpoint (rule).

<itemize>
<item><tt/ProcessSourceAddress=1/<newline>
Default: <tt/1/<newline>
<p>
In addition to rewriting a Calling-Party-Number Information Element ("IE"), the sourceAddress
element of a H.225.0 Setup message can be rewritten, so both contain
consistent information.

<item><tt/RemoveH323Id=1/<newline>
Default: <tt/1/<newline>
<p>
When a sourceInfo element of an H.225.0 Setup message is rewritten,
aliases of type H323_ID, email_ID and url_ID can be left untouched
if this option is disabled.

<item><tt/CLIRPolicy=apply/<newline>
Default: <tt>N/A</tt><newline>
<p>
A global Presentation Indicator ("PI") processing policy can be set up.
This policy will be applied to all CLI rewrite rules that do not override it.
Possible choices are <tt/forward/ - just forward the received PI as-is,
<tt/apply/ - examine the received PI and hide CLI if it is set to "presentation
restricted" and <tt/applyforterminals/ - similar to <tt/apply/ except that the number
is removed only when the call is sent to a terminal, not a gateway.

</itemize>

<descrip>
<tag/Format for an inbound rule:/
<tt>in:CALLER_IP=[pi=[allow|restrict][,forward|apply|applyforterminals]] [cli:|dno:]number_prefix(=|*=|~=|^=|/=)NEW_CLI[,NEW_CLI]...</tt>
<p>
The <tt/in:/ prefix specifies that this is an inbound rule and the <tt/CALLER_IP/
will be used to match the rule (it can be a single IP or an entire subnet).
You can use IPv4 or IPv6 addresses for the <tt/CALLER_IP/.<newline>

The optional <tt/pi=/ parameter controls CLIR (Calling Line Identification Restriction)
features. Specifying either <tt/allow/ or <tt/restrict/ forces presentation indicator
to be set to "presentation allowed" or "presentation restricted". <tt/forward/, <tt/apply/
and <tt/applyforterminals/ controls how the received (if any) presentation indicator
is processed by the gatekeeper. <tt/forward/ means forward it to the callee as-is,
<tt/apply/ is used to hide the CLI if the PI is set to "presentation restricted", <tt/applyforterminals/
is similar to <tt/apply/, except that CLI is hidden only when sending the call to a terminal,
not a gateway.<newline>

The prefix <tt/cli:/ or <tt/dno:/ (the default) selects what number will be used
to match the <tt/number_prefix/ - a caller id (CLI/ANI) or a dialed number.
Number matching/rewriting can be done in five ways:
<itemize>
<item><tt/=/ - a <tt/cli/ or <tt/dno/ number will be matched using a prefix
               match against <tt/number_prefix/ and, if the match is found,
               CLI will be replaced with NEW_CLI.
<item><tt/~=/ - a <tt/cli/ or <tt/dno/ number will be matched using an identity
               match against <tt/number_prefix/ and, if both numbers are the same,
               CLI will be replaced with NEW_CLI.
<item><tt/*=/ - (VALID ONLY FOR <tt/cli/) a <tt/cli/ number will be matched using
               a prefix match against <tt/number_prefix/ and, if the match is found,
               the matched CLI prefix (<tt/number_prefix/) will be replaced
		with a NEW_CLI prefix.
<item><tt/^=/ - a <tt/cli/ or <tt/dno/ number will be matched using a prefix
               match against <tt/number_prefix/ and, if the match is found,
               H.323_ID will be replaced with NEW_CLI, Calling-Station-Id will remain unchanged.
<item><tt>/=</tt> - a <tt/cli/ or <tt/dno/ number will be matched using an identity
               match against <tt/number_prefix/ and, if both numbers are the same,
               H.323_ID will be replaced with NEW_CLI, Calling-Station=Id will remain unchanged,
</itemize>
After the equality (=/~=/*=/^=//=) sign, there follows a list of new CLI values to be used.
If more than one value is specified, one will be chosen on a random basis.
It's possible to specify whole number ranges, like 49173600000-49173699999
(for number ranges CLIs should have a fixed length).
There is a special string constant "any" which may be used in place
of the <tt/CALLER_IP/ or the <tt/number_prefix/. To enable <tt/CLIR/ for this rule,
use the special string constant <tt/"hide"/ instead of the list of new CLI values.
Note that CLIR is far more useful for outbound rules.

<tag/Example 1:/
<tscreen><verb>
[RewriteCLI]
in:192.168.1.1=dno:5551=3003
in:192.168.1.1=cli:1001=2222
in:192.168.1.1=any=1111
</verb></tscreen>
<p>
These rules state that for calls from the IP 192.168.1.1:
1) if the user dialed a number beginning with 5551, set CLI to 3003,
2) if the call is from user with CLI beginning with 1001, set CLI to 2222,
3) for other calls from this IP, set CLI to 1111.

<tag/Example 2:/
<tscreen><verb>
[RewriteCLI]
in:192.168.1.0/24=any=18001111
in:192.168.2.0/24=any=18002222
in:2002:4ad0:ff00:79a::2/64=any=18003333
in:any=any=0
</verb></tscreen>
<p>
These rules state that:
1) for calls from the network 192.168.1.0/24, set CLI to 18001111,
2) for calls from the network 192.168.2.0/24, set CLI to 18002222,
3) for calls from the network 2002:4ad0:ff00:79a::2/64, set CLI to 18003333,
4) for other calls, set CLI to 0.

<tag/Example 3:/
<tscreen><verb>
[RewriteCLI]
in:192.168.1.0/24=0048*=48
in:192.168.1.0/24=0*=48
in:any=100.~=48900900900
</verb></tscreen>
<p>
These rules state that:
1) for calls from the network 192.168.1.0/24, rewrite 0048 to 48 (example - 0048900900900 => 48900900900),
2) for other calls from the network 192.168.1.0/24, rewrite 0 to 48 (example - 0900900900 => 48900900900),
3) for other calls, if CLI is 4 digits and starts with 100, set it to 48900900900.

<tag/Example 4 (CLIR):/
<tscreen><verb>
[RewriteCLI]
in:192.168.1.0/24=any=hide
</verb></tscreen>
<p>
This example causes caller's number to be removed from Setup messages
originating from the 192.168.1.0/24 network. It also causes proper presentation
and screening indicators to be set in Setup messages.
</descrip>

<descrip>
<tag/Format for an outbound rule:/
<tt>out:CALLER_IP=CALLEE_IP [pi=[allow|restrict][,forward|apply|applyforterminals]] [cli:|dno:|cno:]number_prefix(=|~=|*=)NEW_CLI[,NEW_CLI]...</tt>
<p>
The <tt/out:/ prefix tells that this is an outbound rule, the <tt/CALLER_IP/
and the <tt/CALLEE_IP/ will be used to match the rule and can be a single IP
or a subnet address.<newline>

The optional <tt/pi=/ parameter controls CLIR (Calling Line Identification Restriction)
features. Specifying either <tt/allow/ or <tt/restrict/ forces the presentation indicator
to be set to "presentation allowed" or "presentation restricted". <tt/forward/, <tt/apply/
and <tt/applyforterminals/ controls how the received (if any) presentation indicator
is processed by the gatekeeper. <tt/forward/ means just to forward it to the callee as-is,
<tt/apply/ means hiding CLI if the PI is set to "presentation restricted", <tt/applyforterminals/
is similar to <tt/apply/, except that the CLI is hidden only when sending the call to a terminal,
not a gateway.<newline>

The prefix <tt/cli:/, <tt/dno:/ (the default) or <tt/cno:/ selects what number
will be used to match the <tt/number_prefix/ - a caller id (CLI/ANI),
a dialed number or a destination/called number (the dialed number after rewrite).
Number matching/rewriting can be done in three ways:
<itemize>

<!-- TODO: NONE OF THE EXAMPLES ARE FOR CNO? -->

<item><tt/=/ - a <tt/cli/ or <tt/dno/ number will be matched using a prefix
               match against <tt/number_prefix/ and, if the match is found,
               CLI will be replaced with NEW_CLI,
<item><tt/~=/ - a <tt/cli/ or <tt/dno/ number will be matched using an identity
               match against <tt/number_prefix/ and, if both numbers are the same,
               CLI will be replaced with NEW_CLI,
<item><tt/*=/ - (VALID ONLY FOR <tt/cli/) a <tt/cli/ number will be matched using
               a prefix match against <tt/number_prefix/ and, if the match is found,
               the matched CLI prefix (<tt/number_prefix/) will be replaced
			   with a NEW_CLI prefix.
</itemize>
After the equality sign (=/~=/*=), a list of new CLI values to be used is specified.
If more than one value is configured, one will be chosen on a random basis.
It's possible to specify entire number ranges, like 49173600000-49173699999.
There is a special string constant "any" which can be used in place
of the <tt/CALLER_IP/, the <tt/CALLEE_IP/ or the <tt/number_prefix/. 
To enable <tt/CLIR/ for this rule, use a special string constant <tt/"hide"/
or <tt/"hidefromterminals"/ instead of the list of new CLI values.

<tag/Example 1:/
<tscreen><verb>
[RewriteCLI]
out:any=192.168.1.1 any=1001
out:any=192.168.1.2 any=1002
</verb></tscreen>
<p>
These rules set a fixed ANI/CLI for each terminating IP:
1) present myself with ANI 1001, when sending calls to IP 192.168.1.1,
2) present myself with ANI 1002, when sending calls to IP 192.168.1.2.

<tag/Example 2:/
<tscreen><verb>
[RewriteCLI]
out:any=192.168.1.1 any=1001-1999,3001-3999
</verb></tscreen>
<p>
This rule randomly selects ANI/CLI from range 1001-1999, 3001-3999
for calls sent to 192.168.1.1.

<tag/Example 3 (CLIR):/
<tscreen><verb>
[RewriteCLI]
out:any=any any=hidefromterminals
out:192.168.1.1=any any=hide
</verb></tscreen>
<p>
In this example each subscriber has enabled CLIR, so all calls to terminals
will have a caller's number removed and presentation/screening indicators set.
Calls to gateways will have the presentation indicator set to "presentation restricted"
and the caller's number will not be removed to allow proper call routing and number
removal at the destination equipment.<newline>
One exception to these rules are calls from 192.168.1.1 which will have a caller's number
always removed, no matter whether calling a terminal or a gateway.

<tag/Example 4 (CLIP):/
<tscreen><verb>
[RewriteCLI]
out:any=192.168.1.1 any=hide
</verb></tscreen>
<p>
In this example CLIP (Calling Line Identification Presentation) feature
is disabled for the user 192.168.1.1.

<tag/Example 5 (CLIR):/
<tscreen><verb>
[RewriteCLI]
out:192.168.1.1=any pi=restrict,apply cli:.*=.
out:any=any pi=allow cli:.*=.
</verb></tscreen>
<p>
These rules do not change CLI (.*=.) and:
1) enable CLIR for an endpoint 192.168.1.1. <tt/apply/ tells the gatekeeper
   to not only set the PI, but also to hide the number.
2) force CLI presentation for other endpoints.
</descrip>

<p>
The rule matching process has a strictly defined order:
<enum>
<item>
the closest caller's IP match is determined (closest means with the longest
network mask - single IPs have the highest priority, "any" has the lowest
priority),
<item>
(outbound rules) the closest callee's IP match is determined,
<item>
the longest matching prefix/number is searched for the given IP/IP pair
in the following order:
<enum>
<item><tt/dno:/ type (dialed number) rules are searched,
<item><tt/cno:/ type (destination/called number) rules are searched,
<item><tt/cli:/ type (caller id) rules are searched.
</enum>
</enum>
After a match for caller's/caller's IP is found, no more rules
are checked, even if no prefix/number is matched inside the set of rules
for these IPs.

<p>
On the Windows platform, there is a problem with duplicated config
keys in INI files, so GnuGk provides a workaround for this restriction. This example
will not work because of the same key (<tt/in:192.168.1.1/):
<tscreen><verb>
[RewriteCLI]
in:192.168.1.1=1001=2001
in:192.168.1.1=any=2000
</verb></tscreen>
As a workaround, you can use a string with percent signs (%) at the beginning
and at the end before the key. This prefix will be automatically stripped
from the key name before loading rules:
<tscreen><verb>
[RewriteCLI]
%r1% in:192.168.1.1=1001=2001
%r2% in:192.168.1.1=any=2000
</verb></tscreen>

<sect1>Section &lsqb;RewriteSourceAddress&rsqb;
<label id="rewritesourceaddr">
<p>
With the switches in this section you can filter the sourceAddress elements that are
transported in a Setup message. (Please note that the
<ref id="clirewrite" name="RewriteCLI"> rules may also influence the sourceAddress.)

<itemize>
<item><tt/OnlyE164=1/<newline>
Default: <tt/0/<newline>
<p>
With this switch you can filter out all elements that are not of type E.164.

<item><tt/OnlyValid10Dand11D=1/<newline>
Default: <tt/0/<newline>
<p>
With this switch you can filter out all elements that are not valid 10-digit or 11-digit US numbers.
They may be of any alias type (unless OnlyE164 is set), but no formatting characters are allowed.
11-digit numbers must start with 1 and area codes must start with 2..9.
</itemize>

